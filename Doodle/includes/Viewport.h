/* (C) 2009 by Andrea Franceschini <andrea.franceschini@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef VIEWPORT_H_
#define VIEWPORT_H_

#include <QGLWidget>

class QResizeEvent;
class QKeyEvent;
class QPaintEvent;
class QGLFramebufferObject;

namespace Doodle {
class Painter;

/*!
 * An OpenGL 2D viewport for visual feedback.
 *
 * This is actually not 2D since the visual feedback is drawn on a dynamic
 * texture that's then applied to a GL_QUAD that can be translated, rotated and
 * scaled in order to compensate the distortion given by beamer and mirrors
 * angles.
 */
class Viewport : public QGLWidget {
	Q_OBJECT

public:
	/*!
	 * Standard constructor.
	 *
	 * \param	painter	Painter helper instance.
	 */
	Viewport(Painter* painter);

	/*!
	 * Standard destructor.
	 */
	~Viewport();

	/*!
	 * \return Minimum size of the Viewport.
	 */
	QSize minimumSizeHint() const;

	/*!
	 * \return	Initial size of the Viewport.
	 */
	QSize sizeHint() const;

	/*!
	 * \return	Horizontal scale factor of the GL_QUAD.
	 */
	double xScale() const { return _xScale; }

	/*!
	 * Sets the horizontal scale factor of the GL_QUAD.
	 *
	 * \param	xScale	Horizontal scale factor.
	 */
	void setXScale(double xScale) { _xScale = xScale; }

	/*!
	 * \return	Vertical scale factor of the GL_QUAD.
	 */
	double yScale() const { return _yScale; }

	/*!
	 * Sets the vertical scale factor of the GL_QUAD.
	 *
	 * \param	yScale	Vertical scale factor.
	 */
	void setYScale(double yScale) { _yScale = yScale; }

	/*!
	 * \return	Rotation of the GL_QUAD along the x axis.
	 */
	double xRotation() const { return _xRotation; }

	/*!
	 * Sets the rotation of the GL_QUAD along the x axis.
	 *
	 * \param	xRotation	Angle of rotation.
	 */
	void setXRotation(double xRotation) { _xRotation = xRotation; }

	/*!
	 * \return	Rotation of the GL_QUAD along the z axis.
	 */
	double zRotation() const { return _zRotation; }

	/*!
	 * Sets the rotation of the GL_QUAD along the z axis.
	 *
	 * \param	zRotation	Angle of rotation.
	 */
	void setZRotation(double zRotation) { _zRotation = zRotation; }

	/*!
	 * \return	Translation of the GL_QUAD along the x axis.
	 */
	double xPosition() const { return _xPosition; }

	/*!
	 * Sets the translation of the GL_QUAD along the x axis.
	 *
	 * \param	xPosition	Amount of translation.
	 */
	void setXPosition(double xPosition) { _xPosition = xPosition; }

	/*!
	 * \return	Translation of the GL_QUAD along the y axis.
	 */
	double yPosition() const { return _yPosition; }

	/*!
	 * Sets the translation of the GL_QUAD along the y axis.
	 *
	 * \param	yPosition	Amount of translation.
	 */
	void setYPosition(double yPosition) { _yPosition = yPosition; }

	/*!
	 * \return	Translation of the GL_QUAD along the z axis.
	 */
	double zPosition() const { return _zPosition; }

	/*!
	 * Sets the translation of the GL_QUAD along the z axis.
	 *
	 * \param	zPosition	Amount of translation.
	 */
	void setZPosition(double zPosition) { _zPosition = zPosition; }

public slots:
	/*!
	 * Calls QWidget::update() which in turn triggers a repaint event.
	 */
	void animate();

protected:
	/*!
	 * Intercepts and processes pressed keys.
	 *
	 * \param	event	The QKeyEvent generated by the pression of the key.
	 */
	void keyPressEvent(QKeyEvent* event);

	/*!
	 * Intercepts and processes released keys.
	 *
	 * \param	event	The QKeyEvent generated by the release of the key.
	 */
	void keyReleaseEvent(QKeyEvent* event);

	/*!
	 * This is where the painting happes. This function is triggered by a
	 * repaint event. This is an internal mechanism of Qt.
	 *
	 * \param	event	The repaint event.
	 */
	void paintEvent(QPaintEvent* event);

	/*!
	 * OpenGL initialization routines.
	 */
	void initializeGL();
//	void initCommon();
//	void initPbuffer();

	/*!
	 * Routine called when a resize event is dispatched to the Viewport.
	 *
	 * \param	width	New width.
	 * \param	height	New height.
	 */
	void resizeGL(int width, int height);

private:
	bool _fullscreen;
	bool _calibration;

	bool _hasShift;
	double _xScale;
	double _yScale;
	double _xRotation;
	double _zRotation;
	double _xPosition;
	double _yPosition;
	double _zPosition;

	Painter* _painter;

	GLuint _object;
	QGLFramebufferObject* _fbo;

	void saveGLState();
	void restoreGLState();
};
}

#endif /* VIEWPORT_H_ */
